#!/bin/sh


IGNORE=/usr/ssr/ignore.list
if [ -f "/jffs/configs/ssr_user.txt" ] ;then
IGNORE2=/jffs/configs/ssr_user.txt
else
IGNORE2=/usr/ssr/ignore.user
fi

flush_r() {

iptables -t nat -F SHADOWSOCKS 2>/dev/null
iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS 2>/dev/null
iptables -t nat -D OUTPUT -p tcp -j SHADOWSOCKS 2>/dev/null
iptables -t nat -X SHADOWSOCKS  2>/dev/null
ipset -X ssr 2>/dev/null

return 0	
}

gen_iplist() {
	cat <<-EOF
		0.0.0.0/8
		10.0.0.0/8
		100.64.0.0/10
		127.0.0.0/8
		169.254.0.0/16
		172.16.0.0/12
		192.0.0.0/24
		192.0.2.0/24
		192.88.99.0/24
		192.168.0.0/16
		198.18.0.0/15
		198.51.100.0/24
		203.0.113.0/24
		224.0.0.0/4
		240.0.0.0/4
		255.255.255.255
		$(cat ${IGNORE2:=/dev/null} 2>/dev/null)
EOF
}

gen_iplist2() {
	cat <<-EOF
		$(cat ${IGNORE:=/dev/null} 2>/dev/null)
EOF
}

start_pdnsd() {
	local usr_dns="8.8.4.4"
	local usr_port="53"
  
	local tcp_dns_list="208.67.222.222"
	[ -z "$usr_dns" ] && usr_dns="8.8.8.8"
	[ -z "$usr_port" ] && usr_port="53"
	mkdir -p /var/etc /var/pdnsd
	
  if ! test -f "/var/pdnsd/pdnsd.cache"; then
	dd if=/dev/zero of="/var/pdnsd/pdnsd.cache" bs=1 count=4 2> /dev/null
	chown -R nobody.nobody /var/pdnsd
	fi
	
	cat > /var/etc/pdnsd.conf <<EOF
global {
	perm_cache=2048;
	cache_dir="/var/pdnsd";
	pid_file = /var/run/pdnsd.pid;
	run_as="nobody";
	server_ip = 127.0.0.1;
	server_port = 5354;
	status_ctl = on;
	query_method = tcp_only;
	min_ttl=1h;
	max_ttl=1w;
	timeout=10;
	neg_domain_pol=on;
	proc_limit=2;
	procq_limit=8;
}
server {
	label= "ssr-usrdns";
	ip = $usr_dns;
	port = $usr_port;
	timeout=6;
	uptest=none;
	interval=10m;
	purge_cache=off;
}
server {
	label= "ssr-pdnsd";
	ip = $tcp_dns_list;
	port = 5353;
	timeout=6;
	uptest=none;
	interval=10m;
	purge_cache=off;
}
EOF
chmod 644 /var/etc/pdnsd.conf
/usr/sbin/pdnsd -c /var/etc/pdnsd.conf -d
}

# Get argument
server=$1
local_port=$2 
if [ "$server" == "clean" ] ;then
  flush_r
  exit 0
fi



[ ! -f $IGNORE ] && echo "$IGNORE not found." && exit 1

# Check variable
[ -z $server ] || [ -z $local_port ] && {
	echo "Invalid variable, please check CONFIG."
	exit 1
}

all_proxy=`nvram get ssr_mode`
dns_mode=`nvram get ssr_dnsmode`
monitor_enable=`nvram get ssr_monitor_enable`

# Create a new chain
BEGIN="*nat\n\
:SHADOWSOCKS - [0:0]\n\
-I PREROUTING -p tcp -j SHADOWSOCKS\n\
-I OUTPUT 1 -p tcp -j SHADOWSOCKS\n\
-A SHADOWSOCKS -d $server/32 -j RETURN\n\
"

ipset create ssr hash:net 2>/dev/null

if [ "$dns_mode" = "1" ] ;then
 cp -f /usr/ssr/gfw_list.conf /tmp/etc/dnsmasq.user/gfw_list.conf
 if [ -f "/jffs/configs/ssr_gfw.txt" ] ;then
  icount=`cat /jffs/configs/ssr_gfw.txt|grep .|wc -l`
  if [ $icount -gt 0 ] ;then
   sed '/.*/s/.*/server=\/&\/127.0.0.1#5354\nipset=\/&\/ssr/' /jffs/configs/ssr_gfw.txt > /etc/dnsmasq.user/gfw_user.conf
  else
   rm -f /etc/dnsmasq.user/gfw_user.conf
  fi
 fi
 start_pdnsd
else
 cp -f /usr/ssr/gfw_addr.conf /tmp/etc/dnsmasq.user/gfw_addr.conf
 if [ -f "/jffs/configs/ssr_gfw.txt" ] ;then
  icount=`cat /jffs/configs/ssr_gfw.txt|grep .|wc -l`
  if [ $icount -gt 0 ] ;then
   sed '/.*/s/.*/address=\/&\/93.46.8.89/' /jffs/configs/ssr_gfw.txt > /etc/dnsmasq.user/gfw_user.conf
  else
   rm -f /etc/dnsmasq.user/gfw_user.conf
  fi
 fi
fi
/sbin/restart_dns 2>/dev/null


if [ "$monitor_enable" = "1" ] ;then
/usr/ssr/ssr_mon.sh &
fi


if [ "$all_proxy" = "1" ] ;then
if [ "$dns_mode" = "1" ] ;then
echo -e "$BEGIN\
-A SHADOWSOCKS  -p tcp -m set --match-set ssr dst  -j REDIRECT --to-ports $local_port\n\
COMMIT" | iptables-restore -n
ipset add ssr 8.8.4.4 
else
echo -e "$BEGIN\
-A SHADOWSOCKS  -p tcp -d 93.46.8.89/32  -j REDIRECT --to-ports $local_port\n\

COMMIT" | iptables-restore -n
fi
exit 0
fi

echo -e "$BEGIN\n\
-A SHADOWSOCKS -m set --match-set ssr dst -j RETURN \n\
-A SHADOWSOCKS -p tcp  -j REDIRECT --to-ports $local_port\n\
COMMIT" | iptables-restore -n


# Read the ignore list

if [ "$all_proxy" = "2" ] ;then
ipset -! -R <<-EOF || return 1
$(gen_iplist | sed -e "s/^/add ssr /")
EOF
else
ipset -! -R <<-EOF || return 1
$(gen_iplist | sed -e "s/^/add ssr /")
$(gen_iplist2 | sed -e "s/^/add ssr /")
EOF
fi

exit 0


